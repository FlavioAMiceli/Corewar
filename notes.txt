***********************
DAY: SEPT 9 19:00
TO DO:

	int		read_encoding_byte(char encoding_byte, int offset, bool dir_two)

		return the size of the argument based on the encoding byte


	int		ustr_to_int(unsigned char *field, int position, int size)

		return int value of bytes starting at field[position] up
		field[position + size]. requires big to little endian conversion


	void	int_to_ustr(int value, unsigned char *field, int position, int size)

		write into field[position] up to field[position + size] the value of int
		(which could also be a 2 byte instead of a 4 bytes)


	void	end_game(t_arena *arena)

		call delete_all() and print out winer for the game


	void	delete_all(t_arena *arena)

		ensure that all malloced content has been freed


**********************
.comment on top, can contain empty string
    length < 2048 (COMMENT_LENGTH)
    CAN HAVE '/n'

.name on top, can contain empty string
    length < 128 (PROG_NAME_LENGTH)
    CANNOT HAVE '/n'

all other .<command> are errors

1 instruction per line

/n means end of instruction
    last instruction must contain '/n'

comments (not .comment) start with '#' (COMMENT_CHAR)

labels made only from LABEL_CHARS
    must be followed by ':' (LABEL_CHAR)
    can be empty (no instructions)
    point to one single instruction (?)
    en empty instruction will default to next line's instruction

1
2	DONE
3	DONE
4	DONE
5	DONE
6	DONE
7	DONE
8	DONE
9	DONE
10	looks alright
11	DONE
12
13	looks alright
14	looks alright
15
16


if args are invalid, jump will be invalid/ maybe should replace jump
check op_and() .. not valid
check op_or() .. not valid
segfault occuring if -n is 4 but champs number of champs is below that

comment below found in print_hexdump(), delete this comment when no segfault
	segfaults during debugging of operations.c
	not yet checked, CHECK!!!